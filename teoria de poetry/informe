#  Informe: TeorÃ­a y Uso de Poetry en Python  

**Autor:** Jhonny Equize Silvestre  
**Fecha:** 29 de octubre de 2025  

---

##  1. IntroducciÃ³n

**Poetry** es una herramienta moderna para la **gestiÃ³n de dependencias y empaquetado en proyectos de Python**.  
Permite manejar librerÃ­as externas, crear entornos virtuales, definir versiones especÃ­ficas y publicar paquetes en PyPI de manera sencilla y controlada.  

Su objetivo principal es reemplazar el uso combinado de `pip`, `pipenv` y `setup.py`, ofreciendo una **soluciÃ³n unificada** para el ciclo de vida completo de un proyecto en Python.

---

##  2. TeorÃ­a de Poetry

###  Â¿QuÃ© es Poetry?

Poetry es un **gestor de dependencias y construcciÃ³n de proyectos**.  
Controla quÃ© librerÃ­as necesita un proyecto, instala las versiones correctas y genera archivos que garantizan la **reproducibilidad** del entorno en cualquier equipo.

En lugar de tener mÃºltiples archivos de configuraciÃ³n (`requirements.txt`, `setup.py`, `MANIFEST.in`), Poetry utiliza un solo archivo principal:  
```
pyproject.toml
```

### Principales caracterÃ­sticas

* GestiÃ³n automÃ¡tica de dependencias: Instala, actualiza y bloquea versiones compatibles.

* Entornos virtuales automÃ¡ticos: Crea y usa entornos virtuales sin necesidad de venv o virtualenv.

* Empaquetado y publicaciÃ³n: Permite crear paquetes .whl o .tar.gz y publicarlos fÃ¡cilmente en PyPI.

* Archivo de bloqueo (poetry.lock): Asegura que todas las mÃ¡quinas usen las mismas versiones de librerÃ­as.

* Compatibilidad: Basado en el estÃ¡ndar PEP 518, compatible con herramientas modernas de Python.

## 3. CÃ³mo Usar Poetry

**InstalaciÃ³n**

* En Windows, macOS o Linux:

```
curl -sSL https://install.python-poetry.org | python3 -
```

* O bien con pip:

```
pip install poetry
```


* Verifica la instalaciÃ³n con:

```
poetry --version
```

#### Crear un nuevo proyecto

```
poetry new nombre_proyecto
```

##### Esto crea una estructura bÃ¡sica:

nombre_proyecto/

```
â”œâ”€â”€ pyproject.toml
â”œâ”€â”€ README.md
â”œâ”€â”€ nombre_proyecto/
â”‚   â””â”€â”€ __init__.py
â””â”€â”€ tests/
```

#### Agregar dependencias

```
poetry add nombre_paquete
```

Ejemplo:

```
poetry add requests
```


Esto actualiza pyproject.toml y poetry.lock.

#### Para dependencias de desarrollo (solo necesarias al programar):

```
poetry add --dev pytest
```

#### Instalar dependencias

Si ya tienes un proyecto con pyproject.toml, puedes instalar todas las dependencias con:

```
poetry install
```

Esto tambiÃ©n crea el entorno virtual automÃ¡ticamente.

#### Ejecutar comandos dentro del entorno virtual

Puedes ejecutar tu cÃ³digo o comandos directamente en el entorno de Poetry:

```
poetry run python main.py
poetry run pytest
```


O abrir una consola dentro del entorno virtual:

```
poetry shell
```

#### Actualizar dependencias

```
poetry update
```

Actualiza todas las librerÃ­as a las Ãºltimas versiones compatibles segÃºn el archivo pyproject.toml.

#### Publicar un paquete en PyPI

Compila tu paquete:

```
poetry build
```

PublÃ­calo:

```
poetry publish
```

Puedes incluir tus credenciales de PyPI o usar un token de autenticaciÃ³n.

## 4. Â¿Por QuÃ© Usar Poetry?

Simplicidad: Centraliza toda la gestiÃ³n del proyecto en un solo archivo (pyproject.toml).

 Reproducibilidad: El archivo poetry.lock garantiza que todos los desarrolladores trabajen con las mismas versiones.

 AutomatizaciÃ³n: Crea entornos virtuales automÃ¡ticamente.

 EstandarizaciÃ³n: Cumple con los estÃ¡ndares modernos de Python (PEP 517/518).

 PublicaciÃ³n profesional: Facilita la creaciÃ³n y publicaciÃ³n de paquetes Python.

 Manejo eficiente: Permite manejar proyectos grandes con dependencias complejas sin conflictos de versiones.

## 5. Â¿CuÃ¡ndo Usar Poetry?

Poetry es ideal en los siguientes casos:

ğŸ”¹ Cuando inicias un nuevo proyecto en Python y quieres mantenerlo bien estructurado.

ğŸ”¹ Si necesitas un control preciso sobre versiones de dependencias.

ğŸ”¹ Cuando colaboras con otros desarrolladores y requieres un entorno reproducible.

ğŸ”¹ Si planeas publicar tu librerÃ­a o paquete en PyPI.

ğŸ”¹ Para reemplazar pip + virtualenv + setup.py con una herramienta mÃ¡s integrada y moderna.

## 6. Ejemplo PrÃ¡ctico

CreaciÃ³n y configuraciÃ³n de un proyecto:
# Crear un nuevo proyecto

poetry new calculadora

# Entrar al proyecto

cd calculadora

# Agregar dependencias

poetry add numpy

# Crear entorno virtual e instalar todo

poetry install

# Ejecutar el proyecto

poetry run python calculadora/main.py


Estructura final:

```
calculadora/
â”œâ”€â”€ pyproject.toml
â”œâ”€â”€ poetry.lock
â”œâ”€â”€ calculadora/
â”‚   â””â”€â”€ main.py
â””â”€â”€ tests/
```
