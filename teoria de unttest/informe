#  Teor√≠a y Uso de `unittest` en Python

**Autor:** Jhonny Equize Silvestre  
**Fecha:** 29 de octubre de 2025  

---

##  1. Introducci√≥n

En el desarrollo de software, las **pruebas automatizadas** son fundamentales para garantizar que el c√≥digo funcione correctamente incluso despu√©s de realizar cambios.  

En Python, el m√≥dulo **`unittest`** (incluido en la biblioteca est√°ndar) permite crear, organizar y ejecutar pruebas autom√°ticas de forma estructurada y repetible, asegurando la **calidad y confiabilidad** del software.

---

##  2. Teor√≠a de `unittest`

###  ¬øQu√© es `unittest`? 

`unittest` es el **marco de pruebas (testing framework)** nativo de Python.  
Proporciona herramientas para:
- Escribir casos de prueba (test cases).
- Agruparlos en conjuntos (test suites).
- Ejecutarlos autom√°ticamente.
- Verificar resultados mediante **aserciones** (asserts).

Este m√≥dulo sigue el patr√≥n **xUnit**, que tambi√©n utilizan otros lenguajes (como JUnit en Java o NUnit en .NET).

---

###  Conceptos Clave

 **Concepto** : Descripci√≥n 

 **Test Case** : Unidad m√°s peque√±a de prueba. Comprueba una funcionalidad espec√≠fica.

 **Test Suite** :Conjunto de casos de prueba relacionados.

 **Test Runner** :Encargado de ejecutar las pruebas y mostrar los resultados.

 **Assertions (Aserciones)** :M√©todos que verifican si un resultado es el esperado.

Ejemplos de m√©todos de aserci√≥n:
- `assertEqual(a, b)` ‚Üí Comprueba si `a == b`.  
- `assertTrue(x)` ‚Üí Comprueba si `x` es verdadero.  
- `assertFalse(x)` ‚Üí Comprueba si `x` es falso.  
- `assertRaises(Error)` ‚Üí Verifica si se lanza una excepci√≥n esperada.  

---

##  3. C√≥mo Usar `unittest`

### Crear una prueba b√°sica


Archivo: `test_calculadora.py`

```python
import unittest
from calculadora import sumar

class TestCalculadora(unittest.TestCase):
    def test_suma(self):
        resultado = sumar(2, 3)
        self.assertEqual(resultado, 5)

if __name__ == '__main__':
    unittest.main()

```

Explicaci√≥n:

* import unittest ‚Üí Importa el m√≥dulo de pruebas.

* class TestCalculadora(unittest.TestCase) ‚Üí Define una clase de pruebas que hereda de unittest.TestCase.

* def test_suma(self) ‚Üí Los m√©todos que comienzan con test_ se reconocen como casos de prueba.

* self.assertEqual(...) ‚Üí Comprueba si el resultado de la funci√≥n es el esperado.

* unittest.main() ‚Üí Ejecuta autom√°ticamente todas las pruebas del archivo.

### ejecutar pruebas

Desde la terminal:

```
python -m unittest test_calculadora.py
```


O bien, para ejecutar todas las pruebas en un proyecto:

```
python -m unittest discover
```

### ejemplo con varias pruebas

Archivo: test_operaciones.py

```
import unittest
from operaciones import sumar, restar, dividir

class TestOperaciones(unittest.TestCase):
    def test_sumar(self):
        self.assertEqual(sumar(2, 3), 5)

    def test_restar(self):
        self.assertEqual(restar(5, 3), 2)

    def test_dividir(self):
        self.assertAlmostEqual(dividir(10, 2), 5)

    def test_division_por_cero(self):
        with self.assertRaises(ZeroDivisionError):
            dividir(10, 0)

if __name__ == '__main__':
    unittest.main()
 ```


### metodos de operaciones de limpieza

unittest permite definir m√©todos especiales para preparar y limpiar el entorno antes o despu√©s de las pruebas.

import unittest

```
class TestEjemplo(unittest.TestCase):
    def setUp(self):
        print("Preparando entorno antes de cada prueba")

    def tearDown(self):
        print("Limpiando entorno despu√©s de cada prueba")

    def test_ejemplo(self):
        self.assertTrue(True)
```

setUp() ‚Üí Se ejecuta antes de cada prueba.

tearDown() ‚Üí Se ejecuta despu√©s de cada prueba.

###  Crear un conjunto de pruebas (suite)

Puedes agrupar varias clases de prueba en una sola suite:

```
import unittest
from test_operaciones import TestOperaciones
from test_calculadora import TestCalculadora

def suite():
    suite = unittest.TestSuite()
    suite.addTest(unittest.makeSuite(TestOperaciones))
    suite.addTest(unittest.makeSuite(TestCalculadora))
    return suite

if __name__ == '__main__':
    runner = unittest.TextTestRunner()
    runner.run(suite())
```

## 4.¬øPor Qu√© Usar unittest?

 Evita errores humanos: Las pruebas autom√°ticas detectan fallos que podr√≠an pasar desapercibidos.

 Mantiene la calidad del c√≥digo: Permite refactorizar o agregar nuevas funciones sin romper funcionalidades existentes.

 Estandarizaci√≥n: unittest est√° integrado en Python y cumple con convenciones internacionales de testing (xUnit).

 Documentaci√≥n viva: Las pruebas sirven como ejemplos pr√°cticos de c√≥mo debe comportarse el c√≥digo.

 Integraci√≥n continua: Compatible con herramientas como GitHub Actions, Jenkins o GitLab CI/CD.

## 5.¬øCu√°ndo Usar unittest?

üîπ Desde el inicio del desarrollo, siguiendo la metodolog√≠a TDD (Test Driven Development).

üîπ Antes de hacer grandes cambios o refactorizaciones.

üîπ Al integrar nuevas funcionalidades que puedan afectar el comportamiento previo.

üîπ En cualquier proyecto donde la estabilidad y confiabilidad del software sean esenciales.

üîπ En entornos de producci√≥n o proyectos acad√©micos donde se requiere verificar resultados de manera autom√°tica.

## 6.Ejemplo Completo

Archivo: calculadora.py

```
def sumar(a, b):
    return a + b

def restar(a, b):
    return a - b

def dividir(a, b):
    return a / b

```

Archivo: test_calculadora.py

```
import unittest
from calculadora import sumar, restar, dividir

class TestCalculadora(unittest.TestCase):
    def test_sumar(self):
        self.assertEqual(sumar(2, 3), 5)

    def test_restar(self):
        self.assertEqual(restar(5, 3), 2)

    def test_dividir(self):
        self.assertEqual(dividir(10, 2), 5)

    def test_division_por_cero(self):
        with self.assertRaises(ZeroDivisionError):
            dividir(10, 0)

if __name__ == '__main__':
    unittest.main()
```

Ejecuci√≥n:

```
python -m unittest test_calculadora.py
```

Salida esperada:

```
Ran 4 tests in 0.002s
```

